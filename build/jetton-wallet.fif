"Asm.fif" include
PROGRAM{
  DECLPROC force_chain
  DECLPROC is_resolvable?
  DECLPROC pack_jetton_wallet_data
  DECLPROC calculate_jetton_wallet_state_init
  DECLPROC calculate_jetton_wallet_address
  DECLPROC calculate_user_jetton_wallet_address
  DECLPROC load_data
  DECLPROC save_data
  DECLPROC send_tokens
  DECLPROC receive_tokens
  DECLPROC burn_tokens
  DECLPROC on_bounce
  DECLPROC recv_internal
  97026 DECLMETHOD get_wallet_data
  100881 DECLMETHOD get_status
  force_chain PROC:<{
    REWRITESTDADDR
    DROP
    0 EQINT
    333 THROWIFNOT
  }>
  is_resolvable? PROCINLINE:<{
    REWRITESTDADDR
    DROP
    0 EQINT
  }>
  pack_jetton_wallet_data PROCINLINE:<{
    s0 s4 XCHG
    NEWC
    4 STU
    s0 s3 XCHG2
    STGRAMS
    SWAP
    STSLICER
    SWAP
    STSLICER
    STREF
    ENDC
  }>
  calculate_jetton_wallet_state_init PROCINLINE:<{
    0 PUSHINT
    s0 s(-1) s2 PU2XC
    s1 s3 XCHG
    s5 s0 s5 XC2PU
    pack_jetton_wallet_data INLINECALLDICT
    OVER
    NEWC
    2 STU
    s1 s3 XCHG
    STDICT
    s1 s2 XCHG
    STDICT
    1 STU
    ENDC
  }>
  calculate_jetton_wallet_address PROCINLINE:<{
    HASHCU
    0 PUSHINT
    4 PUSHINT
    NEWC
    3 STU
    8 STI
    256 STU
    ENDC
    CTOS
  }>
  calculate_user_jetton_wallet_address PROCINLINE:<{
    calculate_jetton_wallet_state_init INLINECALLDICT
    calculate_jetton_wallet_address INLINECALLDICT
  }>
  load_data PROCINLINE:<{
    c4 PUSH
    CTOS
    4 LDU
    LDGRAMS
    LDMSGADDR
    LDMSGADDR
    LDREF
    ENDS
  }>
  save_data PROCINLINE:<{
    pack_jetton_wallet_data INLINECALLDICT
    c4 POP
  }>
  send_tokens PROC:<{
    s0 s3 XCHG
    64 LDU
    LDGRAMS
    LDMSGADDR
    OVER
    force_chain CALLDICT
    load_data INLINECALLDICT
    s1 s10 PUSH2
    SDEQ
    s5 PUSH
    0 EQINT
    OVER
    OR
    45 THROWIFNOT
    s4 s8 XCPU
    SUB
    s3 s11 PUXC
    SDEQ
    s0 s4 XCHG2
    OR
    73 THROWIFNOT
    s9 PUSH
    -1 GTINT
    47 THROWIFNOT
    s5 s5 s2 XCPU2
    calculate_jetton_wallet_state_init INLINECALLDICT
    DUP
    calculate_jetton_wallet_address INLINECALLDICT
    s0 s5 XCHG
    LDMSGADDR
    LDDICT
    NIP
    LDGRAMS
    7 PUSHINT
    24 PUSHINT
    NEWC
    6 STU
    s0 s9 XCHG2
    STSLICER
    0 PUSHINT
    STGRAMS
    s1 s8 XCHG
    108 STU
    s1 s3 XCHG
    STREF
    395134233 PUSHINT
    NEWC
    32 STU
    s1 s10 XCHG
    64 STU
    s0 s8 XCHG2
    STGRAMS
    s2 PUSH
    STSLICER
    s0 s7 XCHG2
    STSLICER
    s6 PUSH
    STGRAMS
    s0 s4 XCHG2
    STSLICER
    ENDC
    s0 s6 XCHG2
    STREF
    s4 PUSH
    IF:<{
      2 PUSHINT
    }>ELSE<{
      1 PUSHINT
    }>
    s0 s9 XCHG2
    MUL
    s1 s4 XCHG
    ADD
    30000000 PUSHINT
    ADD
    s1 s5 XCHG
    GREATER
    48 THROWIFNOT
    s0 s5 XCHG
    ENDC
    64 PUSHINT
    SENDRAWMSG
    s4 s4 XCHG2
    save_data INLINECALLDICT
  }>
  receive_tokens PROC:<{
    load_data INLINECALLDICT
    s0 s9 XCHG
    64 LDU
    LDGRAMS
    s5 s1 XCPU
    ADD
    s0 s5 XCHG
    LDMSGADDR
    LDMSGADDR
    s5 s12 PUSH2
    SDEQ
    s3 s6 s14 PUSH3
    calculate_user_jetton_wallet_address INLINECALLDICT
    s0 s14 XCHG2
    SDEQ
    s1 s13 XCHG
    OR
    74 THROWIFNOT
    s0 s11 XCHG
    LDGRAMS
    s11 s9 XCPU
    SUB
    10000000 PUSHINT
    TUCK
    MIN
    SUB
    10000000 PUSHINT
    ADD
    s1 s9 XCHG
    SUB
    s8 PUSH
    IF:<{
      s8 s9 PUXC
      ADD
      s1 s9 XCHG
      SUB
      1935855772 PUSHINT
      NEWC
      32 STU
      s3 s(-1) PUXC
      64 STU
      ROT
      STGRAMS
      s0 s8 XCHG2
      STSLICER
      s0 s8 XCHG2
      STSLICER
      ENDC
      1 PUSHINT
      24 PUSHINT
      NEWC
      6 STU
      s4 PUSH
      STSLICER
      s0 s7 XCHG2
      STGRAMS
      s1 s6 XCHG
      107 STU
      s1 s5 XCHG
      STREF
      ENDC
      1 PUSHINT
      SENDRAWMSG
      s3 s5 XCHG
      s3 s4 XCHG
    }>ELSE<{
      s4 s10 XCHG
      s3 s9 XCHG
      s8 POP
      4 BLKDROP
    }>
    s6 PUSH
    2 PLDU
    0 NEQINT
    s4 PUSH
    0 GTINT
    AND
    IF:<{
      3576854235 PUSHINT
      0 PUSHINT
      16 PUSHINT
      NEWC
      6 STU
      s0 s9 XCHG2
      STSLICER
      s0 s5 XCHG2
      STGRAMS
      s1 s7 XCHG
      107 STU
      s1 s3 XCHG
      32 STU
      s1 s3 XCHG
      64 STU
      ENDC
      2 PUSHINT
      SENDRAWMSG
      s0 s3 XCHG2
    }>ELSE<{
      s2 s6 XCHG
      3 2 BLKDROP2
    }>
    s0 s0 s3 XCHG3
    s0 s4 XCHG
    save_data INLINECALLDICT
  }>
  burn_tokens PROC:<{
    load_data INLINECALLDICT
    s0 s8 XCHG
    64 LDU
    LDGRAMS
    LDMSGADDR
    DROP
    s5 s1 XCPU
    SUB
    s3 s9 PUSH2
    SDEQ
    s5 s10 PUXC
    SDEQ
    s10 PUSH
    OR
    73 THROWIFNOT
    s6 PUSH
    0 EQINT
    s0 s10 XCHG2
    OR
    45 THROWIFNOT
    s8 PUSH
    -1 GTINT
    47 THROWIFNOT
    s0 s6 XCHG
    20000000 PUSHINT
    ADD
    s1 s7 XCHG
    GREATER
    48 THROWIFNOT
    2078119902 PUSHINT
    NEWC
    32 STU
    s1 s6 XCHG
    64 STU
    s0 s4 XCHG2
    STGRAMS
    s3 PUSH
    STSLICER
    SWAP
    STSLICER
    ENDC
    1 PUSHINT
    24 PUSHINT
    NEWC
    6 STU
    s5 PUSH
    STSLICER
    0 PUSHINT
    STGRAMS
    107 STU
    STREF
    ENDC
    64 PUSHINT
    SENDRAWMSG
    s2 s4 XCHG2
    save_data INLINECALLDICT
  }>
  on_bounce PROC:<{
    32 PUSHINT
    SDSKIPFIRST
    load_data INLINECALLDICT
    s0 s5 XCHG
    32 LDU
    16 PUSHPOW2DEC
    s2 PUSH
    395134233 PUSHINT
    EQUAL
    s0 s3 XCHG
    2078119902 PUSHINT
    EQUAL
    s1 s3 XCHG
    OR
    s1 s2 XCHG
    THROWANYIFNOT
    64 LDU
    NIP
    LDGRAMS
    DROP
    s1 s3 XCHG
    ADD
    s0 s3 XCHG
    s2 s4 XCHG2
    save_data INLINECALLDICT
  }>
  recv_internal PROC:<{
    DUP
    SEMPTY
    IFJMP:<{
      4 BLKDROP
    }>
    SWAP
    CTOS
    4 LDU
    SWAP
    1 PUSHINT
    AND
    IFJMP:<{
      s1 s3 XCHG
      3 BLKDROP
      on_bounce CALLDICT
    }>
    LDMSGADDR
    LDMSGADDR
    NIP
    LDGRAMS
    NIP
    1 PUSHINT
    SDSKIPFIRST
    LDGRAMS
    NIP
    LDGRAMS
    DROP
    3 PUSHINT
    1 MULRSHIFT#
    s0 s2 XCHG
    32 LDU
    OVER
    260734629 PUSHINT
    EQUAL
    IFJMP:<{
      NIP
      s4 POP
      -ROT
      send_tokens CALLDICT
    }>
    OVER
    395134233 PUSHINT
    EQUAL
    IFJMP:<{
      NIP
      s4 s4 s4 XCHG3
      s0 s3 XCHG
      receive_tokens CALLDICT
    }>
    s5 POP
    DUP
    1499400124 PUSHINT
    EQUAL
    IFJMP:<{
      DROP
      -ROT
      burn_tokens CALLDICT
    }>
    2 2 BLKDROP2
    100 EQINT
    IFJMP:<{
      SWAP
      64 PUSHINT
      SDSKIPFIRST
      4 LDU
      DROP
      load_data INLINECALLDICT
      s4 POP
      s5 s5 XCPU
      SDEQ
      74 THROWIFNOT
      2SWAP
      s1 s4 XCHG
      save_data INLINECALLDICT
    }>
    2DROP
    16 PUSHPOW2DEC
    THROWANY
  }>
  get_wallet_data PROC:<{
    load_data INLINECALLDICT
    1 4 BLKDROP2
  }>
  get_status PROC:<{
    load_data INLINECALLDICT
    4 BLKDROP
  }>
}END>c

